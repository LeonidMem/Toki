From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Denery <dorofeevij@gmail.com>
Date: Sun, 12 Feb 2023 13:09:04 +0300
Subject: [PATCH] Buildscript changes


diff --git a/build.gradle b/build.gradle
index 3229e092695e80db3a7090166a41fba2cd9f2669..01a9ec66c39162b0050118faf744f153f0cb2254 100644
--- a/build.gradle
+++ b/build.gradle
@@ -30,7 +30,7 @@ allprojects {
 	apply plugin: 'checkstyle'
 	apply plugin: "com.diffplug.spotless"
 
-	def constantsSource = rootProject.file("src/main/java/net/fabricmc/loader/impl/FabricLoaderImpl.java").text
+	def constantsSource = project(":fabric-loader").file("src/main/java/net/fabricmc/loader/impl/FabricLoaderImpl.java").text // Toki
 	version = (constantsSource =~ /\s+VERSION\s*=\s*"(.*)";/)[0][1] + (ENV.GITHUB_ACTIONS ? "" : "+local")
 
 	repositories {
@@ -136,7 +136,7 @@ task getSat4jAbout(type: Copy) {
 
 task fatJar(type: ShadowJar, dependsOn: getSat4jAbout) {
 	from sourceSets.main.output
-	from project(":minecraft").sourceSets.main.output
+	from project(":fabric-loader:minecraft").sourceSets.main.output // Toki
 	from getSat4jAbout.destinationDir
 	from("LICENSE") {
 		rename { "${it}_${project.archivesBaseName}"}
@@ -165,7 +165,7 @@ File proguardFile = file("build/libs/fabric-loader-${version}.jar")
 
 import proguard.gradle.ProGuardTask
 task proguardJar(type: ProGuardTask, dependsOn: fatJar) {
-	def classpath = project(":minecraft").configurations.compileClasspath
+	def classpath = project(":fabric-loader:minecraft").configurations.compileClasspath // Toki
 
 	inputs.files(fatJar, classpath)
 	outputs.files(proguardFile)
@@ -191,7 +191,7 @@ tasks.withType(AbstractArchiveTask) {
 
 sourcesJar {
 	from sourceSets.main.allSource
-	from project(":minecraft").sourceSets.main.allSource
+	from project(":fabric-loader:minecraft").sourceSets.main.allSource // Toki
 }
 
 // useful for creating test mod jar
@@ -263,13 +263,13 @@ build.dependsOn javadocJar
 
 allprojects {
 	checkstyle {
-		configFile = project.rootProject.file("checkstyle.xml")
+		configFile = project(":fabric-loader").file("checkstyle.xml") // Toki
 		toolVersion = '8.44'
 	}
 
 	spotless {
 		java {
-			licenseHeaderFile(rootProject.file("HEADER"))
+			licenseHeaderFile(project(":fabric-loader").file("HEADER")) // Toki
 			targetExclude '**/lib/gson/*.java'
 		}
 	}
diff --git a/minecraft/build.gradle b/minecraft/build.gradle
index 552e71512f9e1ffc9451b5eb3133571ae7daa686..6f33ca08d8b0f10ee7406a7636006e1864214f8c 100644
--- a/minecraft/build.gradle
+++ b/minecraft/build.gradle
@@ -9,7 +9,7 @@ repositories {
 }
 
 dependencies {
-	api project(":")
+	api project(":fabric-loader") // Toki
 
 	// log4j wrapper
 	compileOnly 'org.apache.logging.log4j:log4j-api:2.8.1'
diff --git a/minecraft/minecraft-test/build.gradle b/minecraft/minecraft-test/build.gradle
index 4cf7a4002f21a7ca1338eebb2b721676c3be3c6d..45b3b81355a81ce97bc8ccd7716bc88acc517450 100644
--- a/minecraft/minecraft-test/build.gradle
+++ b/minecraft/minecraft-test/build.gradle
@@ -15,7 +15,7 @@ dependencies {
 	minecraft "com.mojang:minecraft:${minecraft_version}"
 	mappings "net.fabricmc:yarn:${minecraft_version}+build.3:v2"
 
-	implementation project(":minecraft")
+	implementation project(":fabric-loader:minecraft") // Toki
 
 	// Required for mixin annotation processor
 	annotationProcessor "org.ow2.asm:asm:${project.asm_version}"
@@ -55,7 +55,7 @@ dependencies {
 	productionRuntime "net.fabricmc:intermediary:${minecraft_version}"
 
 	// Include the external libraries on the classpath
-	def installerJson = new JsonSlurper().parse(rootProject.file("src/main/resources/fabric-installer.json"))
+	def installerJson = new JsonSlurper().parse(project(":fabric-loader").file("src/main/resources/fabric-installer.json")) // Toki
 	installerJson.libraries.common.each {
 		productionRuntime it.name
 	}
@@ -65,7 +65,7 @@ dependencies {
 	productionRuntimeMods "net.fabricmc.fabric-api:fabric-api:0.69.1+1.19.3:testmod"
 }
 
-def loaderJarTask = project(":").tasks.proguardJar
+def loaderJarTask = project(":fabric-loader").tasks.proguardJar // Toki
 
 // This is very far beyond loom's API if you copy this, you're on your own.
 task runProductionAutoTestClient(type: JavaExec, dependsOn: [loaderJarTask]) {
@@ -101,4 +101,4 @@ task runProductionAutoTestClient(type: JavaExec, dependsOn: [loaderJarTask]) {
 			"-Dfabric.autoTest"
 		)
 	}
-}
\ No newline at end of file
+}
