From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Denery <dorofeevij@gmail.com>
Date: Sun, 12 Feb 2023 13:09:04 +0300
Subject: [PATCH] Buildscript changes


diff --git a/build.gradle b/build.gradle
index 25584794fc1e1b4cc9631111be6282c7ba929bb2..cc17e2b64c534ba74b28301c78feb9ddeb1ed225 100644
--- a/build.gradle
+++ b/build.gradle
@@ -30,7 +30,7 @@ allprojects {
 	apply plugin: 'checkstyle'
 	apply plugin: "com.diffplug.spotless"
 
-	def constantsSource = rootProject.file("src/main/java/net/fabricmc/loader/impl/FabricLoaderImpl.java").text
+	def constantsSource = project(":fabric-loader").file("src/main/java/net/fabricmc/loader/impl/FabricLoaderImpl.java").text // Toki
 	version = (constantsSource =~ /\s+VERSION\s*=\s*"(.*)";/)[0][1] + (ENV.GITHUB_ACTIONS ? "" : "+local")
 
 	repositories {
@@ -136,7 +136,7 @@ task getSat4jAbout(type: Copy) {
 
 task fatJar(type: ShadowJar, dependsOn: getSat4jAbout) {
 	from sourceSets.main.output
-	from project(":minecraft").sourceSets.main.output
+	from project(":fabric-loader:minecraft").sourceSets.main.output // Toki
 	from getSat4jAbout.destinationDir
 	from("LICENSE") {
 		rename { "${it}_${project.archivesBaseName}"}
@@ -165,7 +165,7 @@ File proguardFile = file("build/libs/fabric-loader-${version}.jar")
 
 import proguard.gradle.ProGuardTask
 task proguardJar(type: ProGuardTask, dependsOn: fatJar) {
-	def classpath = project(":minecraft").configurations.compileClasspath
+	def classpath = project(":fabric-loader:minecraft").configurations.compileClasspath // Toki
 
 	inputs.files(fatJar, classpath)
 	outputs.files(proguardFile)
@@ -191,7 +191,7 @@ tasks.withType(AbstractArchiveTask) {
 
 sourcesJar {
 	from sourceSets.main.allSource
-	from project(":minecraft").sourceSets.main.allSource
+	from project(":fabric-loader:minecraft").sourceSets.main.allSource // Toki
 }
 
 // useful for creating test mod jar
@@ -263,13 +263,13 @@ build.dependsOn javadocJar
 
 allprojects {
 	checkstyle {
-		configFile = project.rootProject.file("checkstyle.xml")
+		configFile = project(":fabric-loader").file("checkstyle.xml") // Toki
 		toolVersion = '8.44'
 	}
 
 	spotless {
 		java {
-			licenseHeaderFile(rootProject.file("HEADER"))
+			licenseHeaderFile(project(":fabric-loader").file("HEADER")) // Toki
 			targetExclude '**/lib/gson/*.java'
 		}
 	}
diff --git a/minecraft/build.gradle b/minecraft/build.gradle
index 552e71512f9e1ffc9451b5eb3133571ae7daa686..6f33ca08d8b0f10ee7406a7636006e1864214f8c 100644
--- a/minecraft/build.gradle
+++ b/minecraft/build.gradle
@@ -9,7 +9,7 @@ repositories {
 }
 
 dependencies {
-	api project(":")
+	api project(":fabric-loader") // Toki
 
 	// log4j wrapper
 	compileOnly 'org.apache.logging.log4j:log4j-api:2.8.1'
diff --git a/minecraft/minecraft-test/build.gradle b/minecraft/minecraft-test/build.gradle
deleted file mode 100644
index bc524f4c17ef9d875eccab7a52c5cc9eeb473a61..0000000000000000000000000000000000000000
--- a/minecraft/minecraft-test/build.gradle
+++ /dev/null
@@ -1,116 +0,0 @@
-apply plugin: "fabric-loom"
-
-sourceCompatibility = JavaVersion.VERSION_17
-targetCompatibility = JavaVersion.VERSION_17
-
-loom {
-	runConfigs.configureEach {
-		ideConfigGenerated = true
-	}
-}
-
-def minecraft_version = "1.19.3";
-
-repositories {
-	mavenCentral()
-}
-
-dependencies {
-	minecraft "com.mojang:minecraft:${minecraft_version}"
-	mappings "net.fabricmc:yarn:${minecraft_version}+build.3:v2"
-
-	implementation project(":minecraft")
-	implementation project(":minecraft").sourceSets.main.output
-	implementation project(":").sourceSets.main.output
-
-	// Required for mixin annotation processor
-	annotationProcessor "org.ow2.asm:asm:${project.asm_version}"
-	annotationProcessor "org.ow2.asm:asm-analysis:${project.asm_version}"
-	annotationProcessor "org.ow2.asm:asm-commons:${project.asm_version}"
-	annotationProcessor "org.ow2.asm:asm-tree:${project.asm_version}"
-	annotationProcessor "org.ow2.asm:asm-util:${project.asm_version}"
-
-	/**
-	 * Ensure we are using the mixin version loader is built against to test the AP.
-	 * Otherwise Loom will default to an older version (due to no mod loader on the mod* configs)
-	 */
-	annotationProcessor ("net.fabricmc:sponge-mixin:${project.mixin_version}") {
-		exclude module: 'launchwrapper'
-		exclude module: 'guava'
-	}
-
-	testImplementation project(":junit")
-}
-
-test {
-	useJUnitPlatform()
-}
-
-tasks.withType(JavaCompile).configureEach {
-	it.options.encoding = "UTF-8"
-	it.options.release = 17
-}
-
-import net.fabricmc.loom.util.OperatingSystem
-import groovy.json.JsonSlurper
-
-configurations {
-	productionRuntime {
-		extendsFrom configurations.minecraftLibraries
-		extendsFrom configurations.loaderLibraries
-		extendsFrom configurations.minecraftRuntimeOnlyLibraries
-	}
-	productionRuntimeMods
-}
-
-dependencies {
-	productionRuntime "net.fabricmc:intermediary:${minecraft_version}"
-
-	// Include the external libraries on the classpath
-	def installerJson = new JsonSlurper().parse(rootProject.file("src/main/resources/fabric-installer.json"))
-	installerJson.libraries.common.each {
-		productionRuntime it.name
-	}
-
-	// Use Fabric's auto client test
-	productionRuntimeMods "net.fabricmc.fabric-api:fabric-api:0.69.1+1.19.3"
-	productionRuntimeMods "net.fabricmc.fabric-api:fabric-api:0.69.1+1.19.3:testmod"
-}
-
-def loaderJarTask = project(":").tasks.proguardJar
-
-// This is very far beyond loom's API if you copy this, you're on your own.
-task runProductionAutoTestClient(type: JavaExec, dependsOn: [loaderJarTask]) {
-	classpath.from configurations.productionRuntime
-	classpath.from loaderJarTask
-	mainClass = "net.fabricmc.loader.impl.launch.knot.KnotClient"
-	workingDir = file("run")
-
-	afterEvaluate {
-		dependsOn downloadAssets
-	}
-
-	doFirst {
-		classpath.from loom.minecraftProvider.minecraftClientJar
-		workingDir.mkdirs()
-
-		args(
-			"--assetIndex", loom.minecraftProvider.versionInfo.assetIndex().fabricId(loom.minecraftProvider.minecraftVersion()),
-			"--assetsDir", new File(loom.files.userCache, "assets").absolutePath,
-			"--gameDir", workingDir.absolutePath
-		)
-
-		if (OperatingSystem.CURRENT_OS == OperatingSystem.MAC_OS) {
-			jvmArgs(
-				"-XstartOnFirstThread"
-			)
-		}
-
-		def mods = configurations.productionRuntimeMods.files.join(File.pathSeparator)
-
-		jvmArgs(
-			"-Dfabric.addMods=${mods}",
-			"-Dfabric.autoTest"
-		)
-	}
-}
\ No newline at end of file
