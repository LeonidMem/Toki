From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Denery <dorofeevij@gmail.com>
Date: Mon, 13 Feb 2023 18:23:18 +0300
Subject: [PATCH] Implement Paper support


diff --git a/build.gradle b/build.gradle
index cc17e2b64c534ba74b28301c78feb9ddeb1ed225..d3b1e2208dc7c5202ec09b9e43349f91855fabb6 100644
--- a/build.gradle
+++ b/build.gradle
@@ -69,6 +69,9 @@ dependencies {
 	api "org.ow2.asm:asm-commons:${project.asm_version}"
 	api "org.ow2.asm:asm-tree:${project.asm_version}"
 	api "org.ow2.asm:asm-util:${project.asm_version}"
+	api("org.sharegov:mjson:1.4.1") {
+		transitive = false
+	}
 
 	api("net.fabricmc:sponge-mixin:${project.mixin_version}") {
 		exclude module: 'launchwrapper'
diff --git a/minecraft/src/main/java/net/fabricmc/loader/impl/game/minecraft/MinecraftGameProvider.java b/minecraft/src/main/java/net/fabricmc/loader/impl/game/minecraft/MinecraftGameProvider.java
index b3b4659f38248abb999b1057cf7d8a8dfa2cc198..048c484893f3d5e31548f44145dcf4b519688429 100644
--- a/minecraft/src/main/java/net/fabricmc/loader/impl/game/minecraft/MinecraftGameProvider.java
+++ b/minecraft/src/main/java/net/fabricmc/loader/impl/game/minecraft/MinecraftGameProvider.java
@@ -33,6 +33,8 @@ import java.util.Locale;
 import java.util.Map;
 import java.util.Set;
 
+import mjson.Json;
+
 import net.fabricmc.api.EnvType;
 import net.fabricmc.loader.api.ObjectShare;
 import net.fabricmc.loader.api.VersionParsingException;
@@ -148,7 +150,7 @@ public class MinecraftGameProvider implements GameProvider {
 
 	@Override
 	public boolean isObfuscated() {
-		return true; // generally yes...
+		return false; // generally yes... // Toki - no
 	}
 
 	@Override
@@ -439,11 +441,17 @@ public class MinecraftGameProvider implements GameProvider {
 		for (Path lib : miscGameLibraries) {
 			launcher.addToClassPath(lib);
 		}
+		// Toki start - additional Paper libraries
+		Json.read(System.getProperty("toki.libraries")).asJsonList().stream().map(Json::asString).forEach(string -> {
+			final Path libPath = Paths.get(string);
+			launcher.addToClassPath(libPath);
+		});
+		// Toki end
 	}
 
 	@Override
 	public void launch(ClassLoader loader) {
-		String targetClass = entrypoint;
+		String targetClass = System.getProperty("toki.entrypoint"); // Toki - we need org.bukkit.craftbukkit.Main there, but we still need to patch the original server main method in EntrypointPatch.
 
 		if (envType == EnvType.CLIENT && targetClass.contains("Applet")) {
 			targetClass = "net.fabricmc.loader.impl.game.minecraft.applet.AppletMain";
diff --git a/minecraft/src/main/java/net/fabricmc/loader/impl/game/minecraft/patch/EntrypointPatch.java b/minecraft/src/main/java/net/fabricmc/loader/impl/game/minecraft/patch/EntrypointPatch.java
index 8858165dcc7a0cc6fabf0ddd61544f3a07295afc..ace57703416fd91dc1feaf3a66988f35bfab3bc0 100644
--- a/minecraft/src/main/java/net/fabricmc/loader/impl/game/minecraft/patch/EntrypointPatch.java
+++ b/minecraft/src/main/java/net/fabricmc/loader/impl/game/minecraft/patch/EntrypointPatch.java
@@ -107,7 +107,7 @@ public class EntrypointPatch extends GamePatch {
 
 		if (gameEntrypoint == null) {
 			// main method searches
-			MethodNode mainMethod = findMethod(mainClass, (method) -> method.name.equals("main") && method.desc.equals("([Ljava/lang/String;)V") && isPublicStatic(method.access));
+			MethodNode mainMethod = findMethod(mainClass, (method) -> method.name.equals("main") && method.desc.equals("(Ljoptsimple/OptionSet;)V") && isPublicStatic(method.access)); // Toki - change main method
 
 			if (mainMethod == null) {
 				throw new RuntimeException("Could not find main method in " + entrypoint + "!");
@@ -254,7 +254,7 @@ public class EntrypointPatch extends GamePatch {
 				}
 			}
 		} else {
-			gameMethod = findMethod(mainClass, (method) -> method.name.equals("main") && method.desc.equals("([Ljava/lang/String;)V") && isPublicStatic(method.access));
+			gameMethod = findMethod(mainClass, (method) -> method.name.equals("main") && method.desc.equals("(Ljoptsimple/OptionSet;)V") && isPublicStatic(method.access)); // Toki - change main method
 		}
 
 		if (gameMethod == null) {
@@ -306,7 +306,7 @@ public class EntrypointPatch extends GamePatch {
 				// If we do not find this, then we are certain this is 20w22a.
 				MethodNode serverStartMethod = findMethod(mainClass, method -> {
 					if ((method.access & Opcodes.ACC_SYNTHETIC) == 0 // reject non-synthetic
-							|| method.name.equals("main") && method.desc.equals("([Ljava/lang/String;)V")) { // reject main method (theoretically superfluous now)
+							|| method.name.equals("main") && method.desc.equals("(Ljoptsimple/OptionSet;)V")) { // reject main method (theoretically superfluous now) // Toki - change main method to fit cb patch
 						return false;
 					}
 
@@ -396,7 +396,7 @@ public class EntrypointPatch extends GamePatch {
 								return false;
 							}
 
-							return constructorType.getArgumentTypes()[0].getDescriptor().equals("Ljava/lang/Thread;");
+							return constructorType.getArgumentTypes()[0].getDescriptor().equals("Ljoptsimple/OptionSet;") && constructorType.getArgumentTypes()[2].getDescriptor().equals("Ljava/lang/Thread;"); // Toki - change constructor finding
 						}
 
 						return false;
diff --git a/settings.gradle b/settings.gradle
deleted file mode 100644
index 53ecb17d9c2084e03b1939e5fbf3b43753836464..0000000000000000000000000000000000000000
--- a/settings.gradle
+++ /dev/null
@@ -1,19 +0,0 @@
-pluginManagement {
-	repositories {
-		maven {
-			url = "https://maven.fabricmc.net"
-			name = "FabricMC"
-		}
-		gradlePluginPortal()
-	}
-}
-rootProject.name='fabric-loader'
-
-include "minecraft"
-include "junit"
-
-if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_17)) {
-	include "minecraft:minecraft-test"
-} else {
-	println("Minecraft test sub project requires java 17 or higher!")
-}
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/FabricLoaderImpl.java b/src/main/java/net/fabricmc/loader/impl/FabricLoaderImpl.java
index 9ad8408db379e7a01b50cac95dd5bb8a217c204c..cdca3057c4f6744f4cd41a7c7d9a3adba2e36466 100644
--- a/src/main/java/net/fabricmc/loader/impl/FabricLoaderImpl.java
+++ b/src/main/java/net/fabricmc/loader/impl/FabricLoaderImpl.java
@@ -197,7 +197,7 @@ public final class FabricLoaderImpl extends net.fabricmc.loader.FabricLoader {
 	}
 
 	private void setup() throws ModResolutionException {
-		boolean remapRegularMods = isDevelopmentEnvironment();
+		boolean remapRegularMods = false; // Toki - TODO: enable remapping
 		VersionOverrides versionOverrides = new VersionOverrides();
 		DependencyOverrides depOverrides = new DependencyOverrides(configDir);
 
diff --git a/src/main/java/net/fabricmc/loader/impl/discovery/IntermediarySpigotMappings.java b/src/main/java/net/fabricmc/loader/impl/discovery/IntermediarySpigotMappings.java
new file mode 100644
index 0000000000000000000000000000000000000000..00410e1bda684d22ed5bc8610b4ae07e18c7b00d
--- /dev/null
+++ b/src/main/java/net/fabricmc/loader/impl/discovery/IntermediarySpigotMappings.java
@@ -0,0 +1,36 @@
+package net.fabricmc.loader.impl.discovery;
+
+import net.fabricmc.mapping.tree.TinyMappingFactory;
+import net.fabricmc.mapping.tree.TinyTree;
+
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.nio.file.Files;
+import java.nio.file.Paths;
+
+/**
+ * TODO make remapping in RuntimeModRemapper.
+ */
+public final class IntermediarySpigotMappings {
+	private IntermediarySpigotMappings() {}
+	private static TinyTree SPIGOT_TO_INTERMEDIARY;
+
+	public static TinyTree getMappings() {
+		if (SPIGOT_TO_INTERMEDIARY == null)
+			return IntermediarySpigotMappings.loadIntermediarySpigotMapping();
+		return SPIGOT_TO_INTERMEDIARY;
+	}
+
+	private static TinyTree loadIntermediarySpigotMapping() {
+		final String intermediaryToSpigotMappingsFile = System.getProperty("toki.mappings");
+		System.out.println("mappings path: " + intermediaryToSpigotMappingsFile);
+		try (BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(Files.newInputStream(Paths.get(intermediaryToSpigotMappingsFile).toFile().toPath())))) {
+			TinyTree tinyTree = TinyMappingFactory.loadWithDetection(bufferedReader);
+			IntermediarySpigotMappings.SPIGOT_TO_INTERMEDIARY = tinyTree;
+			return tinyTree;
+		} catch (final IOException e) {
+			throw new RuntimeException("Failed to read intermediary to spigot mappings: ", e);
+		}
+	}
+}
diff --git a/src/main/java/net/fabricmc/loader/impl/launch/knot/Knot.java b/src/main/java/net/fabricmc/loader/impl/launch/knot/Knot.java
index 6c273f4ce30790d79400ea30adf030a8bf04447d..85919f88a5f9568af79f93296123039e4bf69271 100644
--- a/src/main/java/net/fabricmc/loader/impl/launch/knot/Knot.java
+++ b/src/main/java/net/fabricmc/loader/impl/launch/knot/Knot.java
@@ -259,7 +259,7 @@ public final class Knot extends FabricLauncherBase {
 	@Override
 	public String getTargetNamespace() {
 		// TODO: Won't work outside of Yarn
-		return isDevelopment ? "named" : "intermediary";
+		return isDevelopment ? "named" : "intermediary"; // Toki - TODO: spigot mappings remapping
 	}
 
 	@Override
diff --git a/src/main/resources/fabric-installer.json b/src/main/resources/fabric-installer.json
index 49dac23e8453e78938338dfc61590fcefd1edc27..9aac60bc8fc731eb1a26942067d315d6a40dfebb 100644
--- a/src/main/resources/fabric-installer.json
+++ b/src/main/resources/fabric-installer.json
@@ -39,6 +39,10 @@
       {
         "name": "org.ow2.asm:asm-util:9.4",
         "url": "https://maven.fabricmc.net/"
+      },
+      {
+        "name": "org.sharegov:mjson:1.4.1",
+        "url": "https://repo.maven.apache.org/maven2/"
       }
     ],
     "server": [
